// gradle build -Pprofile=real (or real, demo)
final String DEFAULT_PROFILE = 'local'

buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
		lombokVersion = '1.18.4'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

bootWar {
	baseName = 'mago3d-user'
	version = '0.0.1-SNAPSHOT'
	rootSpec.exclude("**/f4d/")
	println " ========== > exclude f4d directory "
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    // gralde 5.0 lombok error
    //options.compilerArgs += ["-proc:none"]
}
compileJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

test {
	ignoreFailures = true
}

sourceSets {
	main {
		resources {
			if (!project.hasProperty('profile') || !profile) {
				println " ========== > default profile is local. "
				ext.profile = DEFAULT_PROFILE
			}
			
			if (profile == 'real') {
				println " ===========> profile file is ${profile}"
				println " ===========> copy from src/main/resources/real to src/main/resources"
				
				copy {
					from("src/main/resources/real") {
						//exclude 'logback.xml'
						include 'application.properties'
						include 'mago3d.properties'
						include 'logback-spring.xml'
					}
					into "src/main/resources"
				}
			} else {
				println " ===========> profile file is ${profile}"
				//srcDir "src/main/resources"
				exclude "**/real/*"
			}
		}
	}
}
	
dependencies {
	// gradle build script가 groovy로 작성 되었고, ' 와 " 의 가장 큰 차이점은 String interpolation(문자열 보간법 = ${}) 변수를 사용할수 있다는 점이다.

  	compile project(':mago3d-core')
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile 'org.springframework.boot:spring-boot-configuration-processor'
	compile('org.springframework.boot:spring-boot-starter-actuator')
	//compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.security:spring-security-core')
	compile 'io.springfox:springfox-swagger2:2.9.2'
	compile 'io.springfox:springfox-swagger-ui:2.9.2'
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
	compile('org.springframework.boot:spring-boot-starter-amqp')
	
	compile 'com.zaxxer:HikariCP'
	compile 'org.apache.taglibs:taglibs-standard-jstlel:1.2.5'
	compile 'org.apache.logging.log4j:log4j:2.11.1'
	compile 'org.apache.httpcomponents:httpclient'
	compile 'commons-codec:commons-codec:1.11'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
	compile 'org.apache.poi:poi:3.16'
	compile 'org.apache.poi:poi-ooxml:3.16'
	compile 'org.mockito:mockito-core:2.22.0'
	compile 'org.modelmapper:modelmapper:2.3.1'
		
	annotationProcessor("org.projectlombok:lombok:$lombokVersion")
	compileOnly("org.projectlombok:lombok:$lombokVersion")
	testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
	testCompileOnly("org.projectlombok:lombok:$lombokVersion")	
	//compileOnly('org.projectlombok:lombok:1.18.2')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	
	providedRuntime('org.apache.tomcat.embed:tomcat-embed-jasper')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('org.postgresql:postgresql')
}
